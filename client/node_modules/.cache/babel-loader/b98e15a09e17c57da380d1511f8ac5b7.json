{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leemi\\\\Downloads\\\\boiler-plate-ko-master\\\\boiler-plate-ko-master\\\\client\\\\src\\\\hoc\\\\auth.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { auth } from '../_actions/user_action';\nexport default function (SpecificComponent, option, adminRoute = null) {\n  //null    =>  아무나 출입이 가능한 페이지\n  //true    =>  로그인한 유저만 출입이 가능한 페이지\n  //false   =>  로그인한 유저는 출입 불가능한 페이지\n  function AuthenticationCheck(props) {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      dispatch(auth()).then(response => {\n        console.log(response); //로그인 하지 않은 상태 \n\n        if (!response.payload.isAuth) {\n          if (option) {\n            props.history.push('/login');\n          }\n        } else {\n          //로그인 한 상태 \n          if (adminRoute && !response.payload.isAdmin) {\n            props.history.push('/');\n          } else {\n            if (option === false) props.history.push('/');\n          }\n        }\n      });\n    }, []);\n    return React.createElement(SpecificComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n  }\n\n  return AuthenticationCheck;\n}","map":{"version":3,"sources":["C:/Users/leemi/Downloads/boiler-plate-ko-master/boiler-plate-ko-master/client/src/hoc/auth.js"],"names":["React","useEffect","useDispatch","auth","SpecificComponent","option","adminRoute","AuthenticationCheck","props","dispatch","then","response","console","log","payload","isAuth","history","push","isAdmin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,IAAT,QAAqB,yBAArB;AAEA,eAAe,UAAUC,iBAAV,EAA6BC,MAA7B,EAAqCC,UAAU,GAAG,IAAlD,EAAwD;AAEnE;AACA;AACA;AACA,WAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChC,UAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEAD,IAAAA,SAAS,CAAC,MAAM;AAEZQ,MAAAA,QAAQ,CAACN,IAAI,EAAL,CAAR,CAAiBO,IAAjB,CAAsBC,QAAQ,IAAI;AAC9BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAD8B,CAE9B;;AACA,YAAI,CAACA,QAAQ,CAACG,OAAT,CAAiBC,MAAtB,EAA8B;AAC1B,cAAIV,MAAJ,EAAY;AACRG,YAAAA,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,QAAnB;AACH;AACJ,SAJD,MAIO;AACH;AACA,cAAIX,UAAU,IAAI,CAACK,QAAQ,CAACG,OAAT,CAAiBI,OAApC,EAA6C;AACzCV,YAAAA,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH,WAFD,MAEO;AACH,gBAAIZ,MAAM,KAAK,KAAf,EACIG,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACP;AACJ;AACJ,OAhBD;AAiBH,KAnBQ,EAmBN,EAnBM,CAAT;AAqBA,WACI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AACD,SAAOV,mBAAP;AACH","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { auth } from '../_actions/user_action';\n\nexport default function (SpecificComponent, option, adminRoute = null) {\n\n    //null    =>  아무나 출입이 가능한 페이지\n    //true    =>  로그인한 유저만 출입이 가능한 페이지\n    //false   =>  로그인한 유저는 출입 불가능한 페이지\n    function AuthenticationCheck(props) {\n        const dispatch = useDispatch();\n\n        useEffect(() => {\n\n            dispatch(auth()).then(response => {\n                console.log(response)\n                //로그인 하지 않은 상태 \n                if (!response.payload.isAuth) {\n                    if (option) {\n                        props.history.push('/login')\n                    }\n                } else {\n                    //로그인 한 상태 \n                    if (adminRoute && !response.payload.isAdmin) {\n                        props.history.push('/')\n                    } else {\n                        if (option === false)\n                            props.history.push('/')\n                    }\n                }\n            })\n        }, [])\n\n        return (\n            <SpecificComponent />\n        )\n    }\n    return AuthenticationCheck\n}"]},"metadata":{},"sourceType":"module"}