{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leemi\\\\Documents\\\\GitHub\\\\NodeJS_React_JS_with_MongoDB\\\\client\\\\src\\\\components\\\\views\\\\RegisterPage\\\\RegisterPage.js\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from '../../../_actions/user_action';\nimport { withRouter } from 'react-router-dom';\n\nfunction RegisterPage(props) {\n  const dispatch = useDispatch();\n  const [Email, setEmail] = useState(\"\");\n  const [Name, setName] = useState(\"\");\n  const [Password, setPassword] = useState(\"\");\n  const [ConfirmPassword, setConfirmPassword] = useState(\"\");\n\n  const onEmailHandler = event => {\n    setEmail(event.currentTarget.value);\n  };\n\n  const onNameHandler = event => {\n    setName(event.currentTarget.value);\n  };\n\n  const onPasswordHandler = event => {\n    setPassword(event.currentTarget.value);\n  };\n\n  const onConfirmPasswordHandler = event => {\n    setConfirmPassword(event.currentTarget.value);\n  };\n\n  const onSubmitHandler = event => {\n    event.preventDefault();\n\n    if (Password !== ConfirmPassword) {\n      return alert('비밀번호와 비밀번호 확인은 같아야 합니다.');\n    }\n\n    let body = {\n      email: Email,\n      password: Password,\n      name: Name\n    };\n    dispatch(registerUser(body)).then(response => {\n      if (response.payload.success) {\n        props.history.push(\"/login\");\n      } else {\n        alert(\"Failed to sign up\");\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%',\n      height: '100vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    onSubmit: onSubmitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"input\", {\n    type: \"email\",\n    value: Email,\n    onChange: onEmailHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"input\", {\n    type: \"text\",\n    value: Name,\n    onChange: onNameHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Password\"), React.createElement(\"input\", {\n    type: \"password\",\n    value: Password,\n    onChange: onPasswordHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Confirm Password\"), React.createElement(\"input\", {\n    type: \"password\",\n    value: ConfirmPassword,\n    onChange: onConfirmPasswordHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"\\uD68C\\uC6D0 \\uAC00\\uC785\")));\n}\n\nexport default withRouter(RegisterPage);","map":{"version":3,"sources":["C:/Users/leemi/Documents/GitHub/NodeJS_React_JS_with_MongoDB/client/src/components/views/RegisterPage/RegisterPage.js"],"names":["React","useState","useDispatch","registerUser","withRouter","RegisterPage","props","dispatch","Email","setEmail","Name","setName","Password","setPassword","ConfirmPassword","setConfirmPassword","onEmailHandler","event","currentTarget","value","onNameHandler","onPasswordHandler","onConfirmPasswordHandler","onSubmitHandler","preventDefault","alert","body","email","password","name","then","response","payload","success","history","push","display","justifyContent","alignItems","width","height","flexDirection"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from '../../../_actions/user_action';\nimport { withRouter } from 'react-router-dom';\nfunction RegisterPage(props) {\n    const dispatch = useDispatch();\n\n    const [Email, setEmail] = useState(\"\")\n    const [Name, setName] = useState(\"\")\n    const [Password, setPassword] = useState(\"\")\n    const [ConfirmPassword, setConfirmPassword] = useState(\"\")\n\n\n    const onEmailHandler = (event) => {\n        setEmail(event.currentTarget.value)\n    }\n\n    const onNameHandler = (event) => {\n        setName(event.currentTarget.value)\n    }\n\n    const onPasswordHandler = (event) => {\n        setPassword(event.currentTarget.value)\n    }\n\n    const onConfirmPasswordHandler = (event) => {\n        setConfirmPassword(event.currentTarget.value)\n    }\n\n    const onSubmitHandler = (event) => {\n        event.preventDefault();\n\n        if (Password !== ConfirmPassword) {\n            return alert('비밀번호와 비밀번호 확인은 같아야 합니다.')\n        }\n\n        let body = {\n            email: Email,\n            password: Password,\n            name: Name\n        }\n        dispatch(registerUser(body))\n            .then(response => {\n                if (response.payload.success) {\n                    props.history.push(\"/login\")\n                } else {\n                    alert(\"Failed to sign up\")\n                }\n            })\n    }\n\n\n\n    return (\n        <div style={{\n            display: 'flex', justifyContent: 'center', alignItems: 'center'\n            , width: '100%', height: '100vh'\n        }}>\n            <form style={{ display: 'flex', flexDirection: 'column' }}\n                onSubmit={onSubmitHandler}\n            >\n                <label>Email</label>\n                <input type=\"email\" value={Email} onChange={onEmailHandler} />\n\n                <label>Name</label>\n                <input type=\"text\" value={Name} onChange={onNameHandler} />\n\n                <label>Password</label>\n                <input type=\"password\" value={Password} onChange={onPasswordHandler} />\n\n                <label>Confirm Password</label>\n                <input type=\"password\" value={ConfirmPassword} onChange={onConfirmPasswordHandler} />\n\n                <br />\n                <button type=\"submit\">\n                    회원 가입\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default withRouter(RegisterPage)\n"]},"metadata":{},"sourceType":"module"}